import math
import ModuleAgnostic as ma
from PyQt5.QtWidgets import QMainWindow, QApplication
import matplotlib.pylab as plt
from test_data import *
from PyQt5.QtCore import Qt
from shapely.geometry import Point
from shapely.geometry.polygon import Polygon
from PyQt5.QtGui import QGuiApplication
from shapely.affinity import scale


# self.canvas_individual_well.restore_region(self.background)

class MainAPDProgram(QMainWindow):
    def __init__(self, flag=True):
        super().__init__()
        self.ui = Ui_Dialog()
        self.ui.setupUi(self)
        self.fig, self.ax = plt.subplots()
        self.canvas = self.fig.canvas
        self.ui.mp.addWidget(self.canvas)
        self.canvas.mpl_connect('button_press_event', self.onClickIndividualSection)
        self.canvas.mpl_connect('button_release_event', self.onReleaseIndividualSection)
        self.canvas.mpl_connect('motion_notify_event', self.onClickIndividualSection)
        self.draw_section_boo = True
        self.background_data = None
        self.polygon_coord = []
        # self.coordinates = [[0, 0], [-6.264676031909604, 1325.3051936192717], [-11.717248442231444, 2651.563985241069],
        #                     [-17.169820852553283, 3977.8227768628667], [-22.62239326287512, 5304.081568484664], [1286.9973220663799, 5303.218075044675],
        #                     [2596.6170373956347, 5302.354581604686], [3906.226826710724, 5301.611728935967], [5216.116516303917, 5300.709954325495],
        #                     [5211.976939031065, 3978.9664366943316], [5205.964463576867, 2655.430093166541], [5199.95198812267, 1331.893749638751],
        #                     [5199.458178250363, 9.09384180997813], [3914.066635667868, -16.68414797577519], [2614.0787100784582, -11.081173610080544],
        #                     [1307.0405783925783, -5.511180873628965], [0.0024467066982651886, 0.05881186282261375]]

        self.groups = [
            [[511698, 4925870], [511688, 4925840], [511694, 4925810], [511709, 4925720], [511675, 4925720], [511629, 4925690], [511552, 4925690], [511500, 4925660], [511500, 4925660], [511407, 4925670], [511363, 4925710], [511321, 4925740], [511273, 4925770], [511285, 4925870], [511354, 4925890],
             [511414, 4925920], [511468, 4925940], [511546, 4925900], [511606, 4925860], [511638, 4925860], [511698, 4925870]],
            [[511865, 4923290], [511856, 4923280], [511811, 4923240], [511754, 4923180], [511710, 4923100], [511633, 4923030], [511565, 4922980], [511438, 4923060], [511462, 4923130], [511493, 4923240], [511505, 4923310], [511510, 4923380], [511572, 4923440], [511690, 4923460], [511734, 4923410],
             [511774, 4923370], [511837, 4923310], [511865, 4923290]],
            [[511795, 4925340], [511848, 4925340], [511876, 4925350], [511918, 4925360], [511963, 4925390], [511993, 4925330], [512069, 4925220], [512101, 4925140], [512146, 4925070], [512189, 4925010], [512262, 4924950], [512315, 4924910], [512329, 4924890], [512278, 4924850], [512228, 4924790],
             [512230, 4924780], [512198, 4924770], [512155, 4924770], [512131, 4924790], [512112, 4924800], [512080, 4924800], [512043, 4924810], [512011, 4924820], [511977, 4924830], [511965, 4924850], [511964, 4924880], [511953, 4924910], [511921, 4924970], [511900, 4925000], [511895, 4925040],
             [511863, 4925070], [511832, 4925120], [511811, 4925160], [511808, 4925180], [511810, 4925190], [511811, 4925210], [511807, 4925220], [511797, 4925250], [511798, 4925280], [511795, 4925340]],
            [[512871, 4923590], [512896, 4923570], [512920, 4923550], [512947, 4923540], [512974, 4923530], [513007, 4923520], [513039, 4923510], [513059, 4923500], [513065, 4923500], [513104, 4923480], [513126, 4923460], [513127, 4923460], [513109, 4923420], [513095, 4923400], [513059, 4923340],
             [513016, 4923310], [512989, 4923320], [512954, 4923350], [512921, 4923390], [512901, 4923430], [512833, 4923470], [512814, 4923520], [512859, 4923590], [512871, 4923590]],
            [[512549, 4924380], [512511, 4924410], [512482, 4924440], [512443, 4924470], [512428, 4924510], [512421, 4924520], [512434, 4924530], [512541, 4924540], [512548, 4924500], [512556, 4924430], [512559, 4924380], [512549, 4924380]],
            [[512271, 4924250], [512300, 4924250], [512315, 4924250], [512346, 4924250], [512375, 4924230], [512401, 4924220], [512413, 4924210], [512470, 4924210], [512521, 4924210], [512562, 4924230], [512567, 4924220], [512576, 4924110], [512581, 4924050], [512583, 4924030], [512503, 4924030],
             [512465, 4924020], [512466, 4924020], [512464, 4924020], [512425, 4924020], [512372, 4924030], [512331, 4924030], [512323, 4924030], [512264, 4924080], [512248, 4924110], [512217, 4924130], [512188, 4924160], [512179, 4924180], [512191, 4924200], [512206, 4924210], [512220, 4924220],
             [512233, 4924230], [512250, 4924250], [512271, 4924250]],
            [[513764, 4923190], [513757, 4923160], [513756, 4923170], [513707, 4923180], [513688, 4923200], [513663, 4923230], [513628, 4923240], [513595, 4923220], [513570, 4923210], [513554, 4923210], [513530, 4923210], [513500, 4923210], [513484, 4923220], [513427, 4923240], [513423, 4923260],
             [513423, 4923280], [513428, 4923290], [513417, 4923320], [513409, 4923330], [513386, 4923330], [513357, 4923320], [513333, 4923330], [513317, 4923330], [513307, 4923350], [513302, 4923370], [513308, 4923390], [513314, 4923410], [513315, 4923430], [513333, 4923450], [513352, 4923500],
             [513387, 4923560], [513406, 4923620], [513427, 4923730], [513405, 4923830], [513429, 4923960], [513495, 4924010], [513591, 4924020], [513633, 4923930], [513660, 4923840], [513695, 4923610], [513729, 4923480], [513758, 4923400], [513762, 4923300], [513785, 4923260], [513768, 4923200],
             [513764, 4923190]],
            [[512562, 4924230], [512623, 4924240], [512663, 4924250], [512744, 4924270], [512748, 4924260], [512749, 4924260], [512772, 4924220], [512803, 4924160], [512815, 4924090], [512786, 4924040], [512735, 4924010], [512723, 4924000], [512673, 4923960], [512661, 4923930], [512654, 4923890],
             [512642, 4923870], [512613, 4923870], [512587, 4923890], [512582, 4923880], [512583, 4923900], [512584, 4924010], [512581, 4924050], [512576, 4924110], [512567, 4924220], [512562, 4924230]],
            [[512642, 4923870], [512654, 4923890], [512661, 4923930], [512673, 4923960], [512723, 4924000], [512787, 4923960], [512850, 4923930], [512919, 4923880], [512959, 4923830], [512975, 4923770], [512999, 4923760], [513016, 4923710], [513030, 4923670], [513027, 4923660], [512997, 4923670],
             [512967, 4923660], [512943, 4923640], [512915, 4923620], [512869, 4923590], [512857, 4923600], [512829, 4923610], [512788, 4923640], [512750, 4923670], [512676, 4923660], [512644, 4923670], [512626, 4923680], [512609, 4923700], [512601, 4923730], [512601, 4923750], [512606, 4923800],
             [512642, 4923870]],
            [[512541, 4924540], [512538, 4924550], [512558, 4924550], [512598, 4924560], [512598, 4924560], [512659, 4924530], [512686, 4924490], [512686, 4924430], [512711, 4924380], [512721, 4924320], [512744, 4924270], [512663, 4924250], [512623, 4924240], [512562, 4924230], [512562, 4924230],
             [512556, 4924320], [512549, 4924380], [512559, 4924380], [512556, 4924430], [512548, 4924500], [512541, 4924540]],
            [[512233, 4924740], [512232, 4924730], [512233, 4924730], [512233, 4924740], [512228, 4924790], [512278, 4924850], [512329, 4924890], [512361, 4924850], [512434, 4924800], [512448, 4924720], [512492, 4924680], [512527, 4924640], [512564, 4924610], [512598, 4924560], [512558, 4924550],
             [512538, 4924550], [512541, 4924540], [512434, 4924530], [512421, 4924520], [512326, 4924520], [512279, 4924530], [512189, 4924560], [512157, 4924570], [512146, 4924590], [512150, 4924600], [512147, 4924610], [512142, 4924620], [512134, 4924620], [512123, 4924630], [512108, 4924630],
             [512098, 4924640], [512096, 4924650], [512095, 4924670], [512098, 4924690], [512125, 4924680], [512143, 4924660], [512148, 4924650], [512174, 4924660], [512188, 4924660], [512200, 4924660], [512215, 4924680], [512218, 4924700], [512231, 4924730], [512233, 4924740]],
            [[513331, 4922810], [513241, 4922790], [513217, 4922760], [513164, 4922740], [513089, 4922730], [513056, 4922710], [513030, 4922710], [512996, 4922730], [512946, 4922780], [512907, 4922830], [512860, 4922900], [512825, 4922970], [512864, 4922990], [512927, 4923020], [512971, 4923050],
             [513004, 4923080], [513035, 4923110], [513071, 4923130], [513110, 4923130], [513123, 4923120], [513132, 4923090], [513133, 4923070], [513154, 4923060], [513181, 4923050], [513195, 4923020], [513206, 4923000], [513233, 4922960], [513261, 4922930], [513271, 4922910], [513272, 4922880],
             [513280, 4922860], [513290, 4922850], [513308, 4922830], [513323, 4922820], [513331, 4922810]],
            [[513799, 4923050], [513784, 4923000], [513758, 4922970], [513728, 4922950], [513688, 4922940], [513643, 4922940], [513598, 4922970], [513576, 4922990], [513559, 4923010], [513539, 4923000], [513519, 4923000], [513516, 4923010], [513513, 4923030], [513502, 4923050], [513485, 4923060],
             [513466, 4923070], [513456, 4923090], [513447, 4923090], [513458, 4923110], [513474, 4923130], [513504, 4923150], [513506, 4923150], [513513, 4923190], [513484, 4923220], [513500, 4923210], [513530, 4923210], [513554, 4923210], [513570, 4923210], [513595, 4923220], [513628, 4923240],
             [513663, 4923230], [513688, 4923200], [513707, 4923180], [513759, 4923170], [513757, 4923160], [513789, 4923100], [513792, 4923070], [513799, 4923050]],
            [[511963, 4925390], [511918, 4925360], [511876, 4925350], [511848, 4925340], [511795, 4925340], [511745, 4925460], [511738, 4925520], [511708, 4925540], [511678, 4925550], [511661, 4925550], [511637, 4925570], [511572, 4925590], [511500, 4925660], [511552, 4925690], [511629, 4925690],
             [511675, 4925720], [511709, 4925720], [511694, 4925810], [511688, 4925840], [511698, 4925870], [511730, 4925870], [511839, 4925830], [511843, 4925780], [511892, 4925710], [511951, 4925640], [511982, 4925600], [511980, 4925470], [511963, 4925390]],
            [[512323, 4924030], [512347, 4924010], [512311, 4923790], [512247, 4923620], [512202, 4923540], [512141, 4923420], [512080, 4923310], [512003, 4923240], [511900, 4923260], [511837, 4923310], [511774, 4923370], [511734, 4923410], [511690, 4923460], [511610, 4923600], [511610, 4923720],
             [511710, 4923830], [511931, 4923980], [511981, 4924070], [512123, 4924100], [512248, 4924110], [512264, 4924080], [512323, 4924030]],
            [[512465, 4924020], [512503, 4924030], [512583, 4924030], [512584, 4924010], [512583, 4923900], [512564, 4923890], [512519, 4923890], [512482, 4923900], [512449, 4923910], [512424, 4923940], [512434, 4923970], [512465, 4924020]],
            [[513027, 4923660], [513027, 4923660], [513064, 4923640], [513091, 4923590], [513083, 4923560], [513059, 4923500], [513039, 4923510], [513007, 4923520], [512974, 4923530], [512947, 4923540], [512920, 4923550], [512896, 4923570], [512869, 4923590], [512915, 4923620], [512943, 4923640],
             [512967, 4923660], [512997, 4923670], [513027, 4923660]],
            [[511900, 4925010], [511855, 4924980], [511804, 4925030], [511760, 4925120], [511726, 4925170], [511738, 4925260], [511797, 4925250], [511807, 4925220], [511811, 4925210], [511810, 4925190], [511808, 4925180], [511811, 4925160], [511832, 4925120], [511863, 4925070], [511895, 4925040],
             [511900, 4925010]]]
        self.colors = ["#000000", "#004949", "#009292", "#ff6db6", "#ffb6db",
                       "#490092", "#006ddb", "#b66dff", "#6db6ff", "#b6dbff",
                       "#920000", "#924900", "#db6d00", "#24ff24", "#ffff6d",
                       "#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442",
                       "#0072B2", "#D55E00", "#CC79A7"]
        self.labels = [['Biscuit Basin', '1101'],
                       ['Black Sand Basin', '1102'],
                       ['Cascade Group', '1103'],
                       ['Castle Group', '1104'],
                       ['Chain Lakes Complex', '1105'],
                       ['Daisy Group', '1106'],
                       ['Geyser Hill Group', '1107'],
                       ['Giant Group', '1108'],
                       ['Grand Group', '1110'],
                       ['Grotto Group', '1111'],
                       ['Morning Glory Group', '1112'],
                       ['Myriad Group', '1113'],
                       ['Old Faithful Group', '1114'],
                       ['Old Road Group', '1115'],
                       ['Pine Springs Area', '1116'],
                       ['Pipeline Meadows Group', '1117'],
                       ['Round Spring Group', '1118'],
                       ['Sawmill Group', '1119'],
                       ['Westside Group', '1120']]
        self.current_label = []
        self.found_something = False
        self.text_pts = self.ax.text([], [], "", color='black')
        self.pts = self.ax.scatter([], [], c='black', s=50, zorder=2)
        self.border, = self.ax.fill([], [], linewidth=5, zorder=2)
        self.drawIndividualSections()

    def drawIndividualSections(self):
        for i in range(len(self.groups)):
            self.polygon_coord = Polygon(self.groups[i])
            x1, y1 = self.polygon_coord.exterior.xy
            self.ax.plot(x1, y1, color=self.colors[i], linewidth=.7, alpha=0.5, zorder=1)
            self.ax.fill(x1, y1, c=self.colors[i], alpha=.75, zorder=1)
        self.canvas.draw()

    def onReleaseIndividualSection(self, event):
        self.canvas.draw()
        self.canvas.blit(self.ax.bbox)

    def onClickIndividualSection(self, event):
        ix, iy = event.xdata, event.ydata
        self.found_something = False
        if event.button == Qt.LeftButton:
            for i in range(len(self.groups)):
                self.polygon_coord = Polygon(self.groups[i])
                if self.polygon_coord.contains(Point(ix, iy)):
                    self.drawStuff(self.groups[i], i)
                    self.canvas.draw()
                    self.found_something = True
            if not self.found_something:
                self.dontDrawStuff(event, self.groups[i], i, self.labels[i])

    def drawStuff(self, polygon, counter):
        if not self.current_label or self.current_label and self.current_label != self.labels[counter]:
            self.current_label = self.labels[counter]
            new_polygon = scale(Polygon(polygon), xfact=1.5, yfact=1.5, origin='centroid')
            x, y = new_polygon.exterior.coords.xy
            centroid = [new_polygon.centroid.x, new_polygon.centroid.y]
            new_polygon = list(zip(x, y))
            self.text_pts.set_position(centroid)
            self.text_pts.set_text(self.labels[counter][0])
            self.border.set_color(self.colors[counter])
            self.border.set_xy(new_polygon)
            self.ax.draw_artist(self.border)

        elif self.current_label == self.labels[counter]:
            print("SGFDFGDFGDGDF")

    def dontDrawStuff(self):
        x, y = [0], [0]
        self.current_label = []
        new_polygon = list(zip(x, y))
        self.border.set_xy(new_polygon)
        self.text_pts.set_text("")
        self.ax.draw_artist(self.border)


if __name__ == "__main__":
    import sys

    app = QApplication(sys.argv)
    w = MainAPDProgram()
    w.show()
    sys.exit(app.exec_())
